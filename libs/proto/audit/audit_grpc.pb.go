// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: proto/audit/audit.proto

package audit

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuditService_LogAction_FullMethodName            = "/audit.AuditService/LogAction"
	AuditService_GetAuditLogs_FullMethodName         = "/audit.AuditService/GetAuditLogs"
	AuditService_GetResourceAuditLogs_FullMethodName = "/audit.AuditService/GetResourceAuditLogs"
	AuditService_GetUserAuditLogs_FullMethodName     = "/audit.AuditService/GetUserAuditLogs"
)

// AuditServiceClient is the client API for AuditService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuditServiceClient interface {
	// LogAction logs an action in the audit system
	LogAction(ctx context.Context, in *LogActionRequest, opts ...grpc.CallOption) (*AuditLogResponse, error)
	// GetAuditLogs retrieves audit logs with optional filtering
	GetAuditLogs(ctx context.Context, in *GetAuditLogsRequest, opts ...grpc.CallOption) (*GetAuditLogsResponse, error)
	// GetResourceAuditLogs retrieves audit logs for a specific resource
	GetResourceAuditLogs(ctx context.Context, in *GetResourceAuditLogsRequest, opts ...grpc.CallOption) (*GetAuditLogsResponse, error)
	// GetUserAuditLogs retrieves audit logs for a specific user
	GetUserAuditLogs(ctx context.Context, in *GetUserAuditLogsRequest, opts ...grpc.CallOption) (*GetAuditLogsResponse, error)
}

type auditServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuditServiceClient(cc grpc.ClientConnInterface) AuditServiceClient {
	return &auditServiceClient{cc}
}

func (c *auditServiceClient) LogAction(ctx context.Context, in *LogActionRequest, opts ...grpc.CallOption) (*AuditLogResponse, error) {
	out := new(AuditLogResponse)
	err := c.cc.Invoke(ctx, AuditService_LogAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) GetAuditLogs(ctx context.Context, in *GetAuditLogsRequest, opts ...grpc.CallOption) (*GetAuditLogsResponse, error) {
	out := new(GetAuditLogsResponse)
	err := c.cc.Invoke(ctx, AuditService_GetAuditLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) GetResourceAuditLogs(ctx context.Context, in *GetResourceAuditLogsRequest, opts ...grpc.CallOption) (*GetAuditLogsResponse, error) {
	out := new(GetAuditLogsResponse)
	err := c.cc.Invoke(ctx, AuditService_GetResourceAuditLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) GetUserAuditLogs(ctx context.Context, in *GetUserAuditLogsRequest, opts ...grpc.CallOption) (*GetAuditLogsResponse, error) {
	out := new(GetAuditLogsResponse)
	err := c.cc.Invoke(ctx, AuditService_GetUserAuditLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuditServiceServer is the server API for AuditService service.
// All implementations must embed UnimplementedAuditServiceServer
// for forward compatibility
type AuditServiceServer interface {
	// LogAction logs an action in the audit system
	LogAction(context.Context, *LogActionRequest) (*AuditLogResponse, error)
	// GetAuditLogs retrieves audit logs with optional filtering
	GetAuditLogs(context.Context, *GetAuditLogsRequest) (*GetAuditLogsResponse, error)
	// GetResourceAuditLogs retrieves audit logs for a specific resource
	GetResourceAuditLogs(context.Context, *GetResourceAuditLogsRequest) (*GetAuditLogsResponse, error)
	// GetUserAuditLogs retrieves audit logs for a specific user
	GetUserAuditLogs(context.Context, *GetUserAuditLogsRequest) (*GetAuditLogsResponse, error)
	mustEmbedUnimplementedAuditServiceServer()
}

// UnimplementedAuditServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuditServiceServer struct {
}

func (UnimplementedAuditServiceServer) LogAction(context.Context, *LogActionRequest) (*AuditLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogAction not implemented")
}
func (UnimplementedAuditServiceServer) GetAuditLogs(context.Context, *GetAuditLogsRequest) (*GetAuditLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuditLogs not implemented")
}
func (UnimplementedAuditServiceServer) GetResourceAuditLogs(context.Context, *GetResourceAuditLogsRequest) (*GetAuditLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceAuditLogs not implemented")
}
func (UnimplementedAuditServiceServer) GetUserAuditLogs(context.Context, *GetUserAuditLogsRequest) (*GetAuditLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAuditLogs not implemented")
}
func (UnimplementedAuditServiceServer) mustEmbedUnimplementedAuditServiceServer() {}

// UnsafeAuditServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuditServiceServer will
// result in compilation errors.
type UnsafeAuditServiceServer interface {
	mustEmbedUnimplementedAuditServiceServer()
}

func RegisterAuditServiceServer(s grpc.ServiceRegistrar, srv AuditServiceServer) {
	s.RegisterService(&AuditService_ServiceDesc, srv)
}

func _AuditService_LogAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).LogAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditService_LogAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).LogAction(ctx, req.(*LogActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_GetAuditLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuditLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).GetAuditLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditService_GetAuditLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).GetAuditLogs(ctx, req.(*GetAuditLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_GetResourceAuditLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceAuditLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).GetResourceAuditLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditService_GetResourceAuditLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).GetResourceAuditLogs(ctx, req.(*GetResourceAuditLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_GetUserAuditLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAuditLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).GetUserAuditLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditService_GetUserAuditLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).GetUserAuditLogs(ctx, req.(*GetUserAuditLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuditService_ServiceDesc is the grpc.ServiceDesc for AuditService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuditService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "audit.AuditService",
	HandlerType: (*AuditServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogAction",
			Handler:    _AuditService_LogAction_Handler,
		},
		{
			MethodName: "GetAuditLogs",
			Handler:    _AuditService_GetAuditLogs_Handler,
		},
		{
			MethodName: "GetResourceAuditLogs",
			Handler:    _AuditService_GetResourceAuditLogs_Handler,
		},
		{
			MethodName: "GetUserAuditLogs",
			Handler:    _AuditService_GetUserAuditLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/audit/audit.proto",
}
