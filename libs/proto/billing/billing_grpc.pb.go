// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: proto/billing/billing.proto

package billing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BillingService_ChargeTask_FullMethodName          = "/billing.BillingService/ChargeTask"
	BillingService_GetUserBalance_FullMethodName      = "/billing.BillingService/GetUserBalance"
	BillingService_AddUserBalance_FullMethodName      = "/billing.BillingService/AddUserBalance"
	BillingService_GetBillingHistory_FullMethodName   = "/billing.BillingService/GetBillingHistory"
	BillingService_CreateBillingRecord_FullMethodName = "/billing.BillingService/CreateBillingRecord"
)

// BillingServiceClient is the client API for BillingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingServiceClient interface {
	// ChargeTask charges a user for a completed task
	ChargeTask(ctx context.Context, in *ChargeTaskRequest, opts ...grpc.CallOption) (*BillingRecordResponse, error)
	// GetUserBalance retrieves a user's current balance
	GetUserBalance(ctx context.Context, in *GetUserBalanceRequest, opts ...grpc.CallOption) (*GetUserBalanceResponse, error)
	// AddUserBalance adds to a user's balance
	AddUserBalance(ctx context.Context, in *AddUserBalanceRequest, opts ...grpc.CallOption) (*AddUserBalanceResponse, error)
	// GetBillingHistory retrieves a user's billing history
	GetBillingHistory(ctx context.Context, in *GetBillingHistoryRequest, opts ...grpc.CallOption) (*GetBillingHistoryResponse, error)
	// CreateBillingRecord creates a new billing record
	CreateBillingRecord(ctx context.Context, in *CreateBillingRecordRequest, opts ...grpc.CallOption) (*BillingRecordResponse, error)
}

type billingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingServiceClient(cc grpc.ClientConnInterface) BillingServiceClient {
	return &billingServiceClient{cc}
}

func (c *billingServiceClient) ChargeTask(ctx context.Context, in *ChargeTaskRequest, opts ...grpc.CallOption) (*BillingRecordResponse, error) {
	out := new(BillingRecordResponse)
	err := c.cc.Invoke(ctx, BillingService_ChargeTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetUserBalance(ctx context.Context, in *GetUserBalanceRequest, opts ...grpc.CallOption) (*GetUserBalanceResponse, error) {
	out := new(GetUserBalanceResponse)
	err := c.cc.Invoke(ctx, BillingService_GetUserBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) AddUserBalance(ctx context.Context, in *AddUserBalanceRequest, opts ...grpc.CallOption) (*AddUserBalanceResponse, error) {
	out := new(AddUserBalanceResponse)
	err := c.cc.Invoke(ctx, BillingService_AddUserBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetBillingHistory(ctx context.Context, in *GetBillingHistoryRequest, opts ...grpc.CallOption) (*GetBillingHistoryResponse, error) {
	out := new(GetBillingHistoryResponse)
	err := c.cc.Invoke(ctx, BillingService_GetBillingHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) CreateBillingRecord(ctx context.Context, in *CreateBillingRecordRequest, opts ...grpc.CallOption) (*BillingRecordResponse, error) {
	out := new(BillingRecordResponse)
	err := c.cc.Invoke(ctx, BillingService_CreateBillingRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingServiceServer is the server API for BillingService service.
// All implementations must embed UnimplementedBillingServiceServer
// for forward compatibility
type BillingServiceServer interface {
	// ChargeTask charges a user for a completed task
	ChargeTask(context.Context, *ChargeTaskRequest) (*BillingRecordResponse, error)
	// GetUserBalance retrieves a user's current balance
	GetUserBalance(context.Context, *GetUserBalanceRequest) (*GetUserBalanceResponse, error)
	// AddUserBalance adds to a user's balance
	AddUserBalance(context.Context, *AddUserBalanceRequest) (*AddUserBalanceResponse, error)
	// GetBillingHistory retrieves a user's billing history
	GetBillingHistory(context.Context, *GetBillingHistoryRequest) (*GetBillingHistoryResponse, error)
	// CreateBillingRecord creates a new billing record
	CreateBillingRecord(context.Context, *CreateBillingRecordRequest) (*BillingRecordResponse, error)
	mustEmbedUnimplementedBillingServiceServer()
}

// UnimplementedBillingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBillingServiceServer struct {
}

func (UnimplementedBillingServiceServer) ChargeTask(context.Context, *ChargeTaskRequest) (*BillingRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChargeTask not implemented")
}
func (UnimplementedBillingServiceServer) GetUserBalance(context.Context, *GetUserBalanceRequest) (*GetUserBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBalance not implemented")
}
func (UnimplementedBillingServiceServer) AddUserBalance(context.Context, *AddUserBalanceRequest) (*AddUserBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserBalance not implemented")
}
func (UnimplementedBillingServiceServer) GetBillingHistory(context.Context, *GetBillingHistoryRequest) (*GetBillingHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingHistory not implemented")
}
func (UnimplementedBillingServiceServer) CreateBillingRecord(context.Context, *CreateBillingRecordRequest) (*BillingRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBillingRecord not implemented")
}
func (UnimplementedBillingServiceServer) mustEmbedUnimplementedBillingServiceServer() {}

// UnsafeBillingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingServiceServer will
// result in compilation errors.
type UnsafeBillingServiceServer interface {
	mustEmbedUnimplementedBillingServiceServer()
}

func RegisterBillingServiceServer(s grpc.ServiceRegistrar, srv BillingServiceServer) {
	s.RegisterService(&BillingService_ServiceDesc, srv)
}

func _BillingService_ChargeTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChargeTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).ChargeTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_ChargeTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).ChargeTask(ctx, req.(*ChargeTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetUserBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetUserBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetUserBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetUserBalance(ctx, req.(*GetUserBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_AddUserBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).AddUserBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_AddUserBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).AddUserBalance(ctx, req.(*AddUserBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetBillingHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillingHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetBillingHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetBillingHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetBillingHistory(ctx, req.(*GetBillingHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_CreateBillingRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBillingRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).CreateBillingRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_CreateBillingRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).CreateBillingRecord(ctx, req.(*CreateBillingRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BillingService_ServiceDesc is the grpc.ServiceDesc for BillingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "billing.BillingService",
	HandlerType: (*BillingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChargeTask",
			Handler:    _BillingService_ChargeTask_Handler,
		},
		{
			MethodName: "GetUserBalance",
			Handler:    _BillingService_GetUserBalance_Handler,
		},
		{
			MethodName: "AddUserBalance",
			Handler:    _BillingService_AddUserBalance_Handler,
		},
		{
			MethodName: "GetBillingHistory",
			Handler:    _BillingService_GetBillingHistory_Handler,
		},
		{
			MethodName: "CreateBillingRecord",
			Handler:    _BillingService_CreateBillingRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/billing/billing.proto",
}
