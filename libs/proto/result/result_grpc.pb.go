// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: proto/result/result.proto

package result

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ResultAggregatorService_SavePartialResult_FullMethodName = "/result.ResultAggregatorService/SavePartialResult"
	ResultAggregatorService_FinalizeResult_FullMethodName    = "/result.ResultAggregatorService/FinalizeResult"
	ResultAggregatorService_GetResult_FullMethodName         = "/result.ResultAggregatorService/GetResult"
	ResultAggregatorService_GetTaskResult_FullMethodName     = "/result.ResultAggregatorService/GetTaskResult"
	ResultAggregatorService_GetSubTaskResults_FullMethodName = "/result.ResultAggregatorService/GetSubTaskResults"
)

// ResultAggregatorServiceClient is the client API for ResultAggregatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResultAggregatorServiceClient interface {
	// SavePartialResult saves a partial result for a task
	SavePartialResult(ctx context.Context, in *SavePartialResultRequest, opts ...grpc.CallOption) (*SavePartialResultResponse, error)
	// FinalizeResult finalizes the result when all subtasks are completed
	FinalizeResult(ctx context.Context, in *FinalizeResultRequest, opts ...grpc.CallOption) (*FinalizeResultResponse, error)
	// GetResult retrieves the result of a completed task
	GetResult(ctx context.Context, in *GetResultRequest, opts ...grpc.CallOption) (*GetResultResponse, error)
	// GetTaskResult retrieves the full task result object
	GetTaskResult(ctx context.Context, in *GetTaskResultRequest, opts ...grpc.CallOption) (*TaskResultResponse, error)
	// GetSubTaskResults retrieves all subtask results for a task
	GetSubTaskResults(ctx context.Context, in *GetSubTaskResultsRequest, opts ...grpc.CallOption) (*SubTaskResultsResponse, error)
}

type resultAggregatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResultAggregatorServiceClient(cc grpc.ClientConnInterface) ResultAggregatorServiceClient {
	return &resultAggregatorServiceClient{cc}
}

func (c *resultAggregatorServiceClient) SavePartialResult(ctx context.Context, in *SavePartialResultRequest, opts ...grpc.CallOption) (*SavePartialResultResponse, error) {
	out := new(SavePartialResultResponse)
	err := c.cc.Invoke(ctx, ResultAggregatorService_SavePartialResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultAggregatorServiceClient) FinalizeResult(ctx context.Context, in *FinalizeResultRequest, opts ...grpc.CallOption) (*FinalizeResultResponse, error) {
	out := new(FinalizeResultResponse)
	err := c.cc.Invoke(ctx, ResultAggregatorService_FinalizeResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultAggregatorServiceClient) GetResult(ctx context.Context, in *GetResultRequest, opts ...grpc.CallOption) (*GetResultResponse, error) {
	out := new(GetResultResponse)
	err := c.cc.Invoke(ctx, ResultAggregatorService_GetResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultAggregatorServiceClient) GetTaskResult(ctx context.Context, in *GetTaskResultRequest, opts ...grpc.CallOption) (*TaskResultResponse, error) {
	out := new(TaskResultResponse)
	err := c.cc.Invoke(ctx, ResultAggregatorService_GetTaskResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultAggregatorServiceClient) GetSubTaskResults(ctx context.Context, in *GetSubTaskResultsRequest, opts ...grpc.CallOption) (*SubTaskResultsResponse, error) {
	out := new(SubTaskResultsResponse)
	err := c.cc.Invoke(ctx, ResultAggregatorService_GetSubTaskResults_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResultAggregatorServiceServer is the server API for ResultAggregatorService service.
// All implementations must embed UnimplementedResultAggregatorServiceServer
// for forward compatibility
type ResultAggregatorServiceServer interface {
	// SavePartialResult saves a partial result for a task
	SavePartialResult(context.Context, *SavePartialResultRequest) (*SavePartialResultResponse, error)
	// FinalizeResult finalizes the result when all subtasks are completed
	FinalizeResult(context.Context, *FinalizeResultRequest) (*FinalizeResultResponse, error)
	// GetResult retrieves the result of a completed task
	GetResult(context.Context, *GetResultRequest) (*GetResultResponse, error)
	// GetTaskResult retrieves the full task result object
	GetTaskResult(context.Context, *GetTaskResultRequest) (*TaskResultResponse, error)
	// GetSubTaskResults retrieves all subtask results for a task
	GetSubTaskResults(context.Context, *GetSubTaskResultsRequest) (*SubTaskResultsResponse, error)
	mustEmbedUnimplementedResultAggregatorServiceServer()
}

// UnimplementedResultAggregatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedResultAggregatorServiceServer struct {
}

func (UnimplementedResultAggregatorServiceServer) SavePartialResult(context.Context, *SavePartialResultRequest) (*SavePartialResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePartialResult not implemented")
}
func (UnimplementedResultAggregatorServiceServer) FinalizeResult(context.Context, *FinalizeResultRequest) (*FinalizeResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeResult not implemented")
}
func (UnimplementedResultAggregatorServiceServer) GetResult(context.Context, *GetResultRequest) (*GetResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResult not implemented")
}
func (UnimplementedResultAggregatorServiceServer) GetTaskResult(context.Context, *GetTaskResultRequest) (*TaskResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskResult not implemented")
}
func (UnimplementedResultAggregatorServiceServer) GetSubTaskResults(context.Context, *GetSubTaskResultsRequest) (*SubTaskResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubTaskResults not implemented")
}
func (UnimplementedResultAggregatorServiceServer) mustEmbedUnimplementedResultAggregatorServiceServer() {
}

// UnsafeResultAggregatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResultAggregatorServiceServer will
// result in compilation errors.
type UnsafeResultAggregatorServiceServer interface {
	mustEmbedUnimplementedResultAggregatorServiceServer()
}

func RegisterResultAggregatorServiceServer(s grpc.ServiceRegistrar, srv ResultAggregatorServiceServer) {
	s.RegisterService(&ResultAggregatorService_ServiceDesc, srv)
}

func _ResultAggregatorService_SavePartialResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavePartialResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultAggregatorServiceServer).SavePartialResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResultAggregatorService_SavePartialResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultAggregatorServiceServer).SavePartialResult(ctx, req.(*SavePartialResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultAggregatorService_FinalizeResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultAggregatorServiceServer).FinalizeResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResultAggregatorService_FinalizeResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultAggregatorServiceServer).FinalizeResult(ctx, req.(*FinalizeResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultAggregatorService_GetResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultAggregatorServiceServer).GetResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResultAggregatorService_GetResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultAggregatorServiceServer).GetResult(ctx, req.(*GetResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultAggregatorService_GetTaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultAggregatorServiceServer).GetTaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResultAggregatorService_GetTaskResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultAggregatorServiceServer).GetTaskResult(ctx, req.(*GetTaskResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultAggregatorService_GetSubTaskResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubTaskResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultAggregatorServiceServer).GetSubTaskResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResultAggregatorService_GetSubTaskResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultAggregatorServiceServer).GetSubTaskResults(ctx, req.(*GetSubTaskResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResultAggregatorService_ServiceDesc is the grpc.ServiceDesc for ResultAggregatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResultAggregatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "result.ResultAggregatorService",
	HandlerType: (*ResultAggregatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SavePartialResult",
			Handler:    _ResultAggregatorService_SavePartialResult_Handler,
		},
		{
			MethodName: "FinalizeResult",
			Handler:    _ResultAggregatorService_FinalizeResult_Handler,
		},
		{
			MethodName: "GetResult",
			Handler:    _ResultAggregatorService_GetResult_Handler,
		},
		{
			MethodName: "GetTaskResult",
			Handler:    _ResultAggregatorService_GetTaskResult_Handler,
		},
		{
			MethodName: "GetSubTaskResults",
			Handler:    _ResultAggregatorService_GetSubTaskResults_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/result/result.proto",
}
