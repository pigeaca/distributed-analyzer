// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: proto/kafka/messages.proto

package kafka

import (
	task "github.com/distributedmarketplace/pkg/proto/task"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TaskCreatedEvent is published when a new task is created
type TaskCreatedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Task          *task.Task             `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskCreatedEvent) Reset() {
	*x = TaskCreatedEvent{}
	mi := &file_proto_kafka_messages_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskCreatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCreatedEvent) ProtoMessage() {}

func (x *TaskCreatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kafka_messages_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCreatedEvent.ProtoReflect.Descriptor instead.
func (*TaskCreatedEvent) Descriptor() ([]byte, []int) {
	return file_proto_kafka_messages_proto_rawDescGZIP(), []int{0}
}

func (x *TaskCreatedEvent) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskCreatedEvent) GetTask() *task.Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *TaskCreatedEvent) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// TaskScheduledEvent is published when a task is scheduled
type TaskScheduledEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	WorkerIds     []string               `protobuf:"bytes,2,rep,name=worker_ids,json=workerIds,proto3" json:"worker_ids,omitempty"`
	ScheduledAt   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=scheduled_at,json=scheduledAt,proto3" json:"scheduled_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskScheduledEvent) Reset() {
	*x = TaskScheduledEvent{}
	mi := &file_proto_kafka_messages_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskScheduledEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskScheduledEvent) ProtoMessage() {}

func (x *TaskScheduledEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kafka_messages_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskScheduledEvent.ProtoReflect.Descriptor instead.
func (*TaskScheduledEvent) Descriptor() ([]byte, []int) {
	return file_proto_kafka_messages_proto_rawDescGZIP(), []int{1}
}

func (x *TaskScheduledEvent) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskScheduledEvent) GetWorkerIds() []string {
	if x != nil {
		return x.WorkerIds
	}
	return nil
}

func (x *TaskScheduledEvent) GetScheduledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledAt
	}
	return nil
}

// TaskAssignedEvent is published when a task is assigned to a worker
type TaskAssignedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	WorkerId      string                 `protobuf:"bytes,2,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	AssignedAt    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=assigned_at,json=assignedAt,proto3" json:"assigned_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskAssignedEvent) Reset() {
	*x = TaskAssignedEvent{}
	mi := &file_proto_kafka_messages_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskAssignedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAssignedEvent) ProtoMessage() {}

func (x *TaskAssignedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kafka_messages_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAssignedEvent.ProtoReflect.Descriptor instead.
func (*TaskAssignedEvent) Descriptor() ([]byte, []int) {
	return file_proto_kafka_messages_proto_rawDescGZIP(), []int{2}
}

func (x *TaskAssignedEvent) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskAssignedEvent) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *TaskAssignedEvent) GetAssignedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AssignedAt
	}
	return nil
}

// TaskStatusChangedEvent is published when a task status changes
type TaskStatusChangedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	OldStatus     task.Status            `protobuf:"varint,2,opt,name=old_status,json=oldStatus,proto3,enum=task.Status" json:"old_status,omitempty"`
	NewStatus     task.Status            `protobuf:"varint,3,opt,name=new_status,json=newStatus,proto3,enum=task.Status" json:"new_status,omitempty"`
	ChangedAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=changed_at,json=changedAt,proto3" json:"changed_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskStatusChangedEvent) Reset() {
	*x = TaskStatusChangedEvent{}
	mi := &file_proto_kafka_messages_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskStatusChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatusChangedEvent) ProtoMessage() {}

func (x *TaskStatusChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kafka_messages_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatusChangedEvent.ProtoReflect.Descriptor instead.
func (*TaskStatusChangedEvent) Descriptor() ([]byte, []int) {
	return file_proto_kafka_messages_proto_rawDescGZIP(), []int{3}
}

func (x *TaskStatusChangedEvent) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskStatusChangedEvent) GetOldStatus() task.Status {
	if x != nil {
		return x.OldStatus
	}
	return task.Status(0)
}

func (x *TaskStatusChangedEvent) GetNewStatus() task.Status {
	if x != nil {
		return x.NewStatus
	}
	return task.Status(0)
}

func (x *TaskStatusChangedEvent) GetChangedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangedAt
	}
	return nil
}

// TaskCompletedEvent is published when a task is completed
type TaskCompletedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Result        map[string]string      `protobuf:"bytes,2,rep,name=result,proto3" json:"result,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CompletedAt   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskCompletedEvent) Reset() {
	*x = TaskCompletedEvent{}
	mi := &file_proto_kafka_messages_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskCompletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCompletedEvent) ProtoMessage() {}

func (x *TaskCompletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kafka_messages_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCompletedEvent.ProtoReflect.Descriptor instead.
func (*TaskCompletedEvent) Descriptor() ([]byte, []int) {
	return file_proto_kafka_messages_proto_rawDescGZIP(), []int{4}
}

func (x *TaskCompletedEvent) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskCompletedEvent) GetResult() map[string]string {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *TaskCompletedEvent) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

// TaskFailedEvent is published when a task fails
type TaskFailedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	FailedAt      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=failed_at,json=failedAt,proto3" json:"failed_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskFailedEvent) Reset() {
	*x = TaskFailedEvent{}
	mi := &file_proto_kafka_messages_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskFailedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskFailedEvent) ProtoMessage() {}

func (x *TaskFailedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kafka_messages_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskFailedEvent.ProtoReflect.Descriptor instead.
func (*TaskFailedEvent) Descriptor() ([]byte, []int) {
	return file_proto_kafka_messages_proto_rawDescGZIP(), []int{5}
}

func (x *TaskFailedEvent) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskFailedEvent) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *TaskFailedEvent) GetFailedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FailedAt
	}
	return nil
}

// SubTaskCompletedEvent is published when a subtask is completed
type SubTaskCompletedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SubtaskId     string                 `protobuf:"bytes,1,opt,name=subtask_id,json=subtaskId,proto3" json:"subtask_id,omitempty"`
	TaskId        string                 `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	WorkerId      string                 `protobuf:"bytes,3,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Result        map[string]string      `protobuf:"bytes,4,rep,name=result,proto3" json:"result,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CompletedAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubTaskCompletedEvent) Reset() {
	*x = SubTaskCompletedEvent{}
	mi := &file_proto_kafka_messages_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubTaskCompletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubTaskCompletedEvent) ProtoMessage() {}

func (x *SubTaskCompletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kafka_messages_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubTaskCompletedEvent.ProtoReflect.Descriptor instead.
func (*SubTaskCompletedEvent) Descriptor() ([]byte, []int) {
	return file_proto_kafka_messages_proto_rawDescGZIP(), []int{6}
}

func (x *SubTaskCompletedEvent) GetSubtaskId() string {
	if x != nil {
		return x.SubtaskId
	}
	return ""
}

func (x *SubTaskCompletedEvent) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *SubTaskCompletedEvent) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *SubTaskCompletedEvent) GetResult() map[string]string {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *SubTaskCompletedEvent) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

// WorkerStatusChangedEvent is published when a worker status changes
type WorkerStatusChangedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerId      string                 `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	OldStatus     string                 `protobuf:"bytes,2,opt,name=old_status,json=oldStatus,proto3" json:"old_status,omitempty"`
	NewStatus     string                 `protobuf:"bytes,3,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`
	ChangedAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=changed_at,json=changedAt,proto3" json:"changed_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerStatusChangedEvent) Reset() {
	*x = WorkerStatusChangedEvent{}
	mi := &file_proto_kafka_messages_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerStatusChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerStatusChangedEvent) ProtoMessage() {}

func (x *WorkerStatusChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kafka_messages_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerStatusChangedEvent.ProtoReflect.Descriptor instead.
func (*WorkerStatusChangedEvent) Descriptor() ([]byte, []int) {
	return file_proto_kafka_messages_proto_rawDescGZIP(), []int{7}
}

func (x *WorkerStatusChangedEvent) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *WorkerStatusChangedEvent) GetOldStatus() string {
	if x != nil {
		return x.OldStatus
	}
	return ""
}

func (x *WorkerStatusChangedEvent) GetNewStatus() string {
	if x != nil {
		return x.NewStatus
	}
	return ""
}

func (x *WorkerStatusChangedEvent) GetChangedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangedAt
	}
	return nil
}

// BillingEvent is published when a billing action occurs
type BillingEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TaskId        string                 `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Amount        float64                `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency      string                 `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BillingEvent) Reset() {
	*x = BillingEvent{}
	mi := &file_proto_kafka_messages_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BillingEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillingEvent) ProtoMessage() {}

func (x *BillingEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kafka_messages_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillingEvent.ProtoReflect.Descriptor instead.
func (*BillingEvent) Descriptor() ([]byte, []int) {
	return file_proto_kafka_messages_proto_rawDescGZIP(), []int{8}
}

func (x *BillingEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BillingEvent) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *BillingEvent) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BillingEvent) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BillingEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// AuditEvent is published when an audit action occurs
type AuditEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Action        string                 `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Resource      string                 `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	ResourceId    string                 `protobuf:"bytes,4,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuditEvent) Reset() {
	*x = AuditEvent{}
	mi := &file_proto_kafka_messages_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEvent) ProtoMessage() {}

func (x *AuditEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kafka_messages_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEvent.ProtoReflect.Descriptor instead.
func (*AuditEvent) Descriptor() ([]byte, []int) {
	return file_proto_kafka_messages_proto_rawDescGZIP(), []int{9}
}

func (x *AuditEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AuditEvent) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *AuditEvent) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *AuditEvent) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *AuditEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

var File_proto_kafka_messages_proto protoreflect.FileDescriptor

const file_proto_kafka_messages_proto_rawDesc = "" +
	"\n" +
	"\x1aproto/kafka/messages.proto\x12\x05kafka\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x15proto/task/task.proto\"\x86\x01\n" +
	"\x10TaskCreatedEvent\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x1e\n" +
	"\x04task\x18\x02 \x01(\v2\n" +
	".task.TaskR\x04task\x129\n" +
	"\n" +
	"created_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\"\x8b\x01\n" +
	"\x12TaskScheduledEvent\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x1d\n" +
	"\n" +
	"worker_ids\x18\x02 \x03(\tR\tworkerIds\x12=\n" +
	"\fscheduled_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\vscheduledAt\"\x86\x01\n" +
	"\x11TaskAssignedEvent\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x1b\n" +
	"\tworker_id\x18\x02 \x01(\tR\bworkerId\x12;\n" +
	"\vassigned_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"assignedAt\"\xc6\x01\n" +
	"\x16TaskStatusChangedEvent\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12+\n" +
	"\n" +
	"old_status\x18\x02 \x01(\x0e2\f.task.StatusR\toldStatus\x12+\n" +
	"\n" +
	"new_status\x18\x03 \x01(\x0e2\f.task.StatusR\tnewStatus\x129\n" +
	"\n" +
	"changed_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\tchangedAt\"\xe6\x01\n" +
	"\x12TaskCompletedEvent\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12=\n" +
	"\x06result\x18\x02 \x03(\v2%.kafka.TaskCompletedEvent.ResultEntryR\x06result\x12=\n" +
	"\fcompleted_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\vcompletedAt\x1a9\n" +
	"\vResultEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"y\n" +
	"\x0fTaskFailedEvent\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x127\n" +
	"\tfailed_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\bfailedAt\"\xa8\x02\n" +
	"\x15SubTaskCompletedEvent\x12\x1d\n" +
	"\n" +
	"subtask_id\x18\x01 \x01(\tR\tsubtaskId\x12\x17\n" +
	"\atask_id\x18\x02 \x01(\tR\x06taskId\x12\x1b\n" +
	"\tworker_id\x18\x03 \x01(\tR\bworkerId\x12@\n" +
	"\x06result\x18\x04 \x03(\v2(.kafka.SubTaskCompletedEvent.ResultEntryR\x06result\x12=\n" +
	"\fcompleted_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\vcompletedAt\x1a9\n" +
	"\vResultEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xb0\x01\n" +
	"\x18WorkerStatusChangedEvent\x12\x1b\n" +
	"\tworker_id\x18\x01 \x01(\tR\bworkerId\x12\x1d\n" +
	"\n" +
	"old_status\x18\x02 \x01(\tR\toldStatus\x12\x1d\n" +
	"\n" +
	"new_status\x18\x03 \x01(\tR\tnewStatus\x129\n" +
	"\n" +
	"changed_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\tchangedAt\"\xae\x01\n" +
	"\fBillingEvent\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x17\n" +
	"\atask_id\x18\x02 \x01(\tR\x06taskId\x12\x16\n" +
	"\x06amount\x18\x03 \x01(\x01R\x06amount\x12\x1a\n" +
	"\bcurrency\x18\x04 \x01(\tR\bcurrency\x128\n" +
	"\ttimestamp\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\"\xb4\x01\n" +
	"\n" +
	"AuditEvent\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x16\n" +
	"\x06action\x18\x02 \x01(\tR\x06action\x12\x1a\n" +
	"\bresource\x18\x03 \x01(\tR\bresource\x12\x1f\n" +
	"\vresource_id\x18\x04 \x01(\tR\n" +
	"resourceId\x128\n" +
	"\ttimestamp\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestampB3Z1github.com/distributedmarketplace/pkg/proto/kafkab\x06proto3"

var (
	file_proto_kafka_messages_proto_rawDescOnce sync.Once
	file_proto_kafka_messages_proto_rawDescData []byte
)

func file_proto_kafka_messages_proto_rawDescGZIP() []byte {
	file_proto_kafka_messages_proto_rawDescOnce.Do(func() {
		file_proto_kafka_messages_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_kafka_messages_proto_rawDesc), len(file_proto_kafka_messages_proto_rawDesc)))
	})
	return file_proto_kafka_messages_proto_rawDescData
}

var file_proto_kafka_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_proto_kafka_messages_proto_goTypes = []any{
	(*TaskCreatedEvent)(nil),         // 0: kafka.TaskCreatedEvent
	(*TaskScheduledEvent)(nil),       // 1: kafka.TaskScheduledEvent
	(*TaskAssignedEvent)(nil),        // 2: kafka.TaskAssignedEvent
	(*TaskStatusChangedEvent)(nil),   // 3: kafka.TaskStatusChangedEvent
	(*TaskCompletedEvent)(nil),       // 4: kafka.TaskCompletedEvent
	(*TaskFailedEvent)(nil),          // 5: kafka.TaskFailedEvent
	(*SubTaskCompletedEvent)(nil),    // 6: kafka.SubTaskCompletedEvent
	(*WorkerStatusChangedEvent)(nil), // 7: kafka.WorkerStatusChangedEvent
	(*BillingEvent)(nil),             // 8: kafka.BillingEvent
	(*AuditEvent)(nil),               // 9: kafka.AuditEvent
	nil,                              // 10: kafka.TaskCompletedEvent.ResultEntry
	nil,                              // 11: kafka.SubTaskCompletedEvent.ResultEntry
	(*task.Task)(nil),                // 12: task.Task
	(*timestamppb.Timestamp)(nil),    // 13: google.protobuf.Timestamp
	(task.Status)(0),                 // 14: task.Status
}
var file_proto_kafka_messages_proto_depIdxs = []int32{
	12, // 0: kafka.TaskCreatedEvent.task:type_name -> task.Task
	13, // 1: kafka.TaskCreatedEvent.created_at:type_name -> google.protobuf.Timestamp
	13, // 2: kafka.TaskScheduledEvent.scheduled_at:type_name -> google.protobuf.Timestamp
	13, // 3: kafka.TaskAssignedEvent.assigned_at:type_name -> google.protobuf.Timestamp
	14, // 4: kafka.TaskStatusChangedEvent.old_status:type_name -> task.Status
	14, // 5: kafka.TaskStatusChangedEvent.new_status:type_name -> task.Status
	13, // 6: kafka.TaskStatusChangedEvent.changed_at:type_name -> google.protobuf.Timestamp
	10, // 7: kafka.TaskCompletedEvent.result:type_name -> kafka.TaskCompletedEvent.ResultEntry
	13, // 8: kafka.TaskCompletedEvent.completed_at:type_name -> google.protobuf.Timestamp
	13, // 9: kafka.TaskFailedEvent.failed_at:type_name -> google.protobuf.Timestamp
	11, // 10: kafka.SubTaskCompletedEvent.result:type_name -> kafka.SubTaskCompletedEvent.ResultEntry
	13, // 11: kafka.SubTaskCompletedEvent.completed_at:type_name -> google.protobuf.Timestamp
	13, // 12: kafka.WorkerStatusChangedEvent.changed_at:type_name -> google.protobuf.Timestamp
	13, // 13: kafka.BillingEvent.timestamp:type_name -> google.protobuf.Timestamp
	13, // 14: kafka.AuditEvent.timestamp:type_name -> google.protobuf.Timestamp
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_proto_kafka_messages_proto_init() }
func file_proto_kafka_messages_proto_init() {
	if File_proto_kafka_messages_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_kafka_messages_proto_rawDesc), len(file_proto_kafka_messages_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_kafka_messages_proto_goTypes,
		DependencyIndexes: file_proto_kafka_messages_proto_depIdxs,
		MessageInfos:      file_proto_kafka_messages_proto_msgTypes,
	}.Build()
	File_proto_kafka_messages_proto = out.File
	file_proto_kafka_messages_proto_goTypes = nil
	file_proto_kafka_messages_proto_depIdxs = nil
}
